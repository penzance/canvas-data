{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CloudFormation template creates the environment-specific shared infrastructure (S3 buckets, Lambda functions, Data Pipeline, Redshift Data Warehouse).",
    "Parameters": {
        "EnvironmentParameter": {
            "Type": "String",
            "Description": "Environment name",
            "Default": "dev"
        },
        "KeypairParameter": {
            "Type": "String",
            "Description": "Keypair to install on DownloadVerify EC2 and EMR EC2s",
            "Default": "mypublickey-id_rsa"
        },
        "DownloadVerifyLambdaCodeObjectParameter": {
            "Type": "String",
            "Description": "Name of ZIP file in the CodeS3Bucket containing the DowloadVerifyLambda function code",
            "Default": "download-verify.zip"
        },
        "DownloadVerifyAWSDataToolsJARLocationParameter": {
            "Type": "String",
            "Description": "Name of JAR file in the CodeS3Bucket containing the DownloadVerifyAWSDataTools JAR code",
            "Default": "aws_data_tools-1.0.0.jar"
        },
        "DownloadVerifySchemaJARLocationParameter": {
            "Type": "String",
            "Description": "Name of JAR file in the CodeS3Bucket containing the DownloadVerifySchema JAR code",
            "Default": "canvas_data_schema_bindings-1.3.0.jar"
        },
        "DownloadVerifyPythonScriptLocationParameter": {
            "Type": "String",
            "Description": "Name of Python file in the CodeS3Bucket containing the DownloadVerify Python script",
            "Default": "download_and_verify.py"
        },
        "DownloadVerifySecurePropertiesLocationParameter": {
            "Type": "String",
            "Description": "Name of secure settings file for use by DownloadVerify Python script (NOTE: Name must remain secure.properties for now)",
            "Default": "secure.properties"
        },
        "DownloadVerifyCanvasDataSchemaVersion": {
            "Type": "String",
            "Description": "Canvas Data Schema Version",
            "Default": "1.3.0"
        },
        "HiveScriptsLocationParameter": {
            "Type": "String",
            "Description": "Name of directory in the CodeS3Bucket containing the Hive scripts, one script per table",
            "Default": "/hive-scripts"
        },
        "HadoopJARLocationParameter": {
            "Type": "String",
            "Description": "Name of JAR file in the CodeS3Bucket containing the Hadoop JAR code",
            "Default": "myhadoopscript.jar"
        },
        "CodeS3BucketParameter": {
            "Type": "String",
            "Description": "Name of S3 bucket containing various Lambda, JAR and Hadoop code files",
            "Default": "my-bucket"
        },
        "DataPipelineLambdaCodeObjectParameter": {
            "Type": "String",
            "Description": "Name of ZIP file in the CodeS3Bucket containing the DataPipelineLambda function code",
            "Default": "data-pipeline-lambda-code.zip"
        },
        "SuccessSNSEmailParameter": {
            "Type": "String",
            "Description": "Email address to receive success messages",
            "Default": "success@example.com"
        },
        "FailureSNSEmailParameter": {
            "Type": "String",
            "Description": "Email address to receive failure messages",
            "Default": "failure@example.com"
        },
        "RedshiftNodeTypeParameter": {
            "Type": "String",
            "Description": "Redshift node type",
            "Default": "dc1.large"
        },
        "RedshiftMasterUserNameParameter": {
            "Type": "String",
            "Description": "Redshift master user (and default db) name",
            "Default": "mydatabaseadminuser"
        },
        "RedshiftMasterUserPasswordParameter": {
            "Type": "String",
            "Description": "Redshift master user password",
            "Default": "changeM3!"
        },
        "RedshiftAllowVersionUpgradeParameter": {
            "Type": "String",
            "Description": "Redshift AllowVersionUpgrade value",
            "Default": "true"
        },
        "RedshiftAutomatedSnapshotRetentionPeriodParameter": {
            "Type": "Number",
            "Description": "Redshift AutomatedSnapshotRetentionPeriod value (in days)",
            "Default": "1"
        },
        "RedshiftClusterTypeParameter": {
            "Type": "String",
            "Description": "Redshift ClusterType value",
            "Default": "single-node"
        },
        "RedshiftClusterVersionParameter": {
            "Type": "String",
            "Description": "Redshift ClusterVersion value",
            "Default": "1.0"
        },
        "RedshiftPortParameter": {
            "Type": "Number",
            "Description": "Redshift Port value",
            "Default": "5439"
        },
        "RedshiftPreferredMaintenanceWindowParameter": {
            "Type": "String",
            "Description": "Redshift PreferredMaintenanceWindow value",
            "Default": "thu:07:00-thu:07:30"
        },
        "RedshiftDataSubnet1Parameter": {
            "Type": "String",
            "Description": "Redshift data subnet 1",
            "Default": "subnet-12345678"
        },
        "RedshiftDataSubnet2Parameter": {
            "Type": "String",
            "Description": "Redshift data subnet 2",
            "Default": "subnet-23456789"
        },
        "VPCIDParameter": {
            "Type": "String",
            "Description": "VPC ID",
            "Default": "vpc-34567890"
        },
        "PublicSubnetParameter": {
            "Type": "String",
            "Description": "Public subnet for the EMR Cluster",
            "Default": "subnet-45678901"
        },
        "PublicSubnetCidrParameter": {
            "Type": "String",
            "Description": "Public subnet CIDR block for the EMR Cluster",
            "Default": "10.0.0.0/24"
        },
        "PrivateSubnetParameter": {
            "Type": "String",
            "Description": "Private subnet for the DownloadVerify EC2 and the EMR Cluster",
            "Default": "subnet-56789012"
        },
        "PrivateSubnetCidrParameter": {
            "Type": "String",
            "Description": "Private subnet CIDR block for the DownloadVerify EC2 and the EMRCluster",
            "Default": "10.0.1.0/24"
        },
        "VPNCidrParameter": {
            "Type": "String",
            "Description": "CIDR block for our internal VPN (to allow access to Redshift from our VPN)",
            "Default": "10.0.2.0/24"
        },
        "DownloadVerifyAMIIdParameter": {
            "Type": "String",
            "Description": "AMI Id to use for the DownloadVerify Instance(s) (NOTE: Should be instance store AMI, not EBS, for maximum speed)",
            "Default": "ami-66b6c60c"
        },
        "DownloadVerifyInstanceTypeParameter": {
            "Type": "String",
            "Description": "Instance type for DownloadVerify Instance(s)",
            "Default": "i2.8xlarge"
        },
        "EMRMasterInstanceTypeParameter": {
            "Type": "String",
            "Description": "Instance type for the Master EMR Instance",
            "Default": "m3.xlarge"
        },
        "EMRCoreInstanceTypeParameter": {
            "Type": "String",
            "Description": "Instance type for Core EMR Instance(s)",
            "Default": "m3.xlarge"
        },
        "EMRCoreInstanceCountParameter": {
            "Type": "String",
            "Description": "Number of Core EMR Instances",
            "Default": "1"
        },
        "EMRTaskInstanceTypeParameter": {
            "Type": "String",
            "Description": "Instance type for Task EMR Instance(s)",
            "Default": "m3.xlarge"
        },
        "EMRTaskInstanceCountParameter": {
            "Type": "String",
            "Description": "Number of Task EMR Instances",
            "Default": "1"
        },
        "EMRReleaseLabelParameter": {
            "Type": "String",
            "Description": "EMR release label to be used",
            "Default": "emr-4.2.0"
        }
    },
    "Mappings": {},
    "Conditions": {},
    "Resources": {
        "DownloadVerifyLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DownloadVerifyLambdaRole-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1449002131000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:Describe*",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "autoscaling:SetDesiredCapacity"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-enable-log-access"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DownloadVerifyResourceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DownloadVerifyResourceRole-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeTags",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "lambda:Invoke*",
                                        "dynamodb:*",
                                        "s3:Get*",
                                        "s3:List*",
                                        "s3:Put*",
                                        "sns:Publish"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DownloadVerifyResourceInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DownloadVerifyResourceRole"
                    }
                ]
            }
        },
        "DataPipelineLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DataPipelineLambdaRole-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1449002131000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:Describe*",
                                        "datapipeline:*",
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-enable-log-access"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DataPipelineResourceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DataPipelineResourceRole-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:*",
                                        "datapipeline:*",
                                        "dynamodb:*",
                                        "ec2:Describe*",
                                        "elasticmapreduce:AddJobFlowSteps",
                                        "elasticmapreduce:Describe*",
                                        "elasticmapreduce:ListInstance*",
                                        "rds:Describe*",
                                        "redshift:DescribeClusters",
                                        "redshift:DescribeClusterSecurityGroups",
                                        "s3:*",
                                        "sdb:*",
                                        "sns:*",
                                        "sqs:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DataPipelineResourceInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DataPipelineResourceRole"
                    }
                ]
            }
        },
        "DataPipelineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "elasticmapreduce.amazonaws.com",
                                    "datapipeline.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DataPipelineRole-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:*",
                                        "datapipeline:DescribeObjects",
                                        "datapipeline:EvaluateExpression",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:DescribeTable",
                                        "dynamodb:GetItem",
                                        "dynamodb:Query",
                                        "dynamodb:Scan",
                                        "dynamodb:UpdateTable",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:CancelSpotInstanceRequests",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateTags",
                                        "ec2:DeleteTags",
                                        "ec2:Describe*",
                                        "ec2:ModifyImageAttribute",
                                        "ec2:ModifyInstanceAttribute",
                                        "ec2:RequestSpotInstances",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:StopInstances",
                                        "ec2:TerminateInstances",
                                        "ec2:*",
                                        "elasticmapreduce:*",
                                        "iam:GetInstanceProfile",
                                        "iam:GetRole",
                                        "iam:GetRolePolicy",
                                        "iam:ListAttachedRolePolicies",
                                        "iam:ListRolePolicies",
                                        "iam:ListInstanceProfiles",
                                        "iam:PassRole",
                                        "rds:DescribeDBInstances",
                                        "rds:DescribeDBSecurityGroups",
                                        "redshift:DescribeClusters",
                                        "redshift:DescribeClusterSecurityGroups",
                                        "s3:CreateBucket",
                                        "s3:DeleteObject",
                                        "s3:Get*",
                                        "s3:List*",
                                        "s3:Put*",
                                        "sdb:BatchPutAttributes",
                                        "sdb:Select*",
                                        "sns:GetTopicAttributes",
                                        "sns:ListTopics",
                                        "sns:Publish",
                                        "sns:Subscribe",
                                        "sns:Unsubscribe",
                                        "sqs:CreateQueue",
                                        "sqs:Delete*",
                                        "sqs:GetQueue*",
                                        "sqs:PurgeQueue",
                                        "sqs:ReceiveMessage"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DownloadVerifyLC": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "DownloadVerifyAMIIdParameter"
                },
                "InstanceType": {
                    "Ref": "DownloadVerifyInstanceTypeParameter"
                },
                "IamInstanceProfile": {
                    "Ref": "DownloadVerifyResourceInstanceProfile"
                },
                "InstanceMonitoring": "False",
                "KeyName": {
                    "Ref": "KeypairParameter"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "# add something below to check for a result from download_and_verify.py of 0, indicating success\n",
                                "\n",
                                "# copy DownloadVerifyAWSDataToolsJAR, DownloadVerifySchema, DownloadVerifyPythonScript and\n",
                                "# DownloadVerifySecureProperties from S3 to the local FS\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "CodeS3BucketParameter"
                                },
                                "/",
                                {
                                    "Ref": "DownloadVerifyAWSDataToolsJARLocationParameter"
                                },
                                " /root/.\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "CodeS3BucketParameter"
                                },
                                "/",
                                {
                                    "Ref": "DownloadVerifySchemaJARLocationParameter"
                                },
                                " /root/.\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "CodeS3BucketParameter"
                                },
                                "/",
                                {
                                    "Ref": "DownloadVerifyPythonScriptLocationParameter"
                                },
                                " /root/.\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "CodeS3BucketParameter"
                                },
                                "/",
                                {
                                    "Ref": "DownloadVerifySecurePropertiesLocationParameter"
                                },
                                " /root/.\n",
                                "\n",
                                "# setup some environment variables\n",
                                "export CANVAS_DATA_SCHEMA_VERSION=",
                                {
                                    "Ref": "DownloadVerifyCanvasDataSchemaVersion"
                                },
                                "\n",
                                "export AWS_DATA_TOOLS_JAR=/root/",
                                {
                                    "Ref": "DownloadVerifyAWSDataToolsJARLocationParameter"
                                },
                                "\n",
                                "export CANVAS_BINDINGS_JAR=/root/",
                                {
                                    "Ref": "DownloadVerifySchemaJARLocationParameter"
                                },
                                "\n",
                                "export SECURE_PROPERTIES_LOCATION=/root\n",
                                "export CANVAS_DATA_RESULT_FILE=/root/the_result.json\n",
                                "\n",
                                "# Run the Python/JAR download and verify scripts\n",
                                "python /root/",
                                {
                                    "Ref": "DownloadVerifyPythonScriptLocationParameter"
                                },
                                "\n",
                                "if [ $? -ne 0 ]; then\n",
                                "  # do something useful to indicate failure\n",
                                "  aws sns publish --topic-arn \"",
                                {
                                    "Ref": "FailureSNS"
                                },
                                "\" --message \"Nice try\" --subject \"Failed to complete download and verify\" --region us-east-1\n",
                                "  exit\n",
                                "fi\n",
                                "\n",
                                "# Send an email that we completed download and verify\n",
                                "aws sns publish --topic-arn \"",
                                {
                                    "Ref": "SuccessSNS"
                                },
                                "\" --message file:///root/the_result.json --subject \"Completed download and verify\" --region us-east-1\n",
                                "\n",
                                "# Invoke the Lambda function to kickoff the Data Pipeline\n",
                                "aws lambda invoke --function-name ",
                                {
                                    "Ref": "DataPipelineLambda"
                                },
                                " --payload file:///root/the_result.json myoutfile --region us-east-1\n",
                                "\n",
                                "# Reduce max instances for this machine's ASG to 0, thus terminating the machine\n",
                                "asg=$(aws ec2 describe-tags --filters \"Name=resource-id,Values=$(curl http://169.254.169.254/latest/meta-data/instance-id)\" \"Name=key,Values=aws:autoscaling:groupName\" --query 'Tags[*].[Value]' --output text --region us-east-1); aws autoscaling update-auto-scaling-group --auto-scaling-group-name $asg --max-size 0 --region us-east-1\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DownloadVerifyASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "DownloadVerifyLC"
                },
                "MinSize": "0",
                "MaxSize": "0",
                "DesiredCapacity": "0",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnetParameter"
                    }
                ],
                "Tags": [
                    {
                        "PropagateAtLaunch": "True",
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-",
                                    {
                                        "Ref": "EnvironmentParameter"
                                    },
                                    "-DownloadVerify"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "DownloadVerifyLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CodeS3BucketParameter"
                    },
                    "S3Key": {
                        "Ref": "DownloadVerifyLambdaCodeObjectParameter"
                    }
                },
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "Function to kick off download and verify for ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentParameter"
                            }
                        ]
                    ]
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "DownloadVerifyLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs",
                "Timeout": 10
            }
        },
        "DataPipelineLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "CodeS3BucketParameter"
                    },
                    "S3Key": {
                        "Ref": "DataPipelineLambdaCodeObjectParameter"
                    }
                },
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "Function to kick off Data Pipeline for ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentParameter"
                            }
                        ]
                    ]
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "DataPipelineLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs",
                "Timeout": 10
            }
        },
        "DataPipelineLambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "DataPipelineLambda",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "ec2.amazonaws.com",
                "SourceArn": "arn:aws:ec2:::*"
            }
        },
        "IncomingS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags": [
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentParameter"
                        }
                    }
                ]
            }
        },
        "IntermediateS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags": [
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentParameter"
                        }
                    }
                ]
            }
        },
        "ArchivalS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags": [
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentParameter"
                        }
                    }
                ]
            }
        },
        "LoggingS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags": [
                    {
                        "Key": "StackName",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "EnvironmentParameter"
                        }
                    }
                ]
            }
        },
        "RedshiftVPCSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            " Redshift VPC Security Group"
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPCIDParameter"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5439",
                        "ToPort": "5439",
                        "CidrIp": {
                            "Ref": "PublicSubnetCidrParameter"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5439",
                        "ToPort": "5439",
                        "CidrIp": {
                            "Ref": "PrivateSubnetCidrParameter"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5439",
                        "ToPort": "5439",
                        "CidrIp": {
                            "Ref": "VPNCidrParameter"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "RedshiftCluster": {
            "Type": "AWS::Redshift::Cluster",
            "Properties": {
                "AllowVersionUpgrade": {
                    "Ref": "RedshiftAllowVersionUpgradeParameter"
                },
                "AutomatedSnapshotRetentionPeriod": {
                    "Ref": "RedshiftAutomatedSnapshotRetentionPeriodParameter"
                },
                "ClusterType": {
                    "Ref": "RedshiftClusterTypeParameter"
                },
                "ClusterVersion": {
                    "Ref": "RedshiftClusterVersionParameter"
                },
                "DBName": {
                    "Ref": "RedshiftMasterUserNameParameter"
                },
                "MasterUsername": {
                    "Ref": "RedshiftMasterUserNameParameter"
                },
                "MasterUserPassword": {
                    "Ref": "RedshiftMasterUserPasswordParameter"
                },
                "NodeType": {
                    "Ref": "RedshiftNodeTypeParameter"
                },
                "Port": {
                    "Ref": "RedshiftPortParameter"
                },
                "PreferredMaintenanceWindow": {
                    "Ref": "RedshiftPreferredMaintenanceWindowParameter"
                },
                "ClusterSubnetGroupName": {
                    "Ref": "RedshiftClusterSubnetGroup"
                },
                "ClusterParameterGroupName": {
                    "Ref": "RedshiftClusterParameterGroup"
                },
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "RedshiftVPCSecurityGroup"
                    }
                ]
            }
        },
        "RedshiftClusterSubnetGroup": {
            "Type": "AWS::Redshift::ClusterSubnetGroup",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            " Redshift Cluster Subnet Group"
                        ]
                    ]
                },
                "SubnetIds": [
                    {
                        "Ref": "RedshiftDataSubnet1Parameter"
                    },
                    {
                        "Ref": "RedshiftDataSubnet2Parameter"
                    }
                ]
            }
        },
        "RedshiftClusterParameterGroup": {
            "Type": "AWS::Redshift::ClusterParameterGroup",
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            " Redshift Cluster Parameter Group"
                        ]
                    ]
                },
                "ParameterGroupFamily": "redshift-1.0",
                "Parameters": [
                    {
                        "ParameterName": "datestyle",
                        "ParameterValue": "ISO, MDY"
                    },
                    {
                        "ParameterName": "enable_user_activity_logging",
                        "ParameterValue": "false"
                    },
                    {
                        "ParameterName": "extra_float_digits",
                        "ParameterValue": "0"
                    },
                    {
                        "ParameterName": "require_ssl",
                        "ParameterValue": "false"
                    },
                    {
                        "ParameterName": "search_path",
                        "ParameterValue": "$user, public"
                    },
                    {
                        "ParameterName": "statement_timeout",
                        "ParameterValue": "0"
                    },
                    {
                        "ParameterName": "wlm_json_configuration",
                        "ParameterValue": "[{\"query_concurrency\":5}]"
                    }
                ]
            }
        },
        "SuccessSNS": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            "success"
                        ]
                    ]
                },
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "SuccessSNSEmailParameter"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "FailureSNS": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            "failure"
                        ]
                    ]
                },
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "FailureSNSEmailParameter"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "Pipeline": {
            "Type": "AWS::DataPipeline::Pipeline",
            "Properties": {
                "Activate": "False",
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "Data Pipeline for ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentParameter"
                            }
                        ]
                    ]
                },
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            "datapipeline"
                        ]
                    ]
                },
                "PipelineObjects": [
                    {
                        "Id": "Default",
                        "Name": "Default",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "Default"
                            },
                            {
                                "Key": "scheduleType",
                                "StringValue": "cron"
                            },
                            {
                                "Key": "failureAndRerunMode",
                                "StringValue": "CASCADE"
                            },
                            {
                                "Key": "role",
                                "StringValue": {
                                    "Ref": "DataPipelineRole"
                                }
                            },
                            {
                                "Key": "resourceRole",
                                "StringValue": {
                                    "Ref": "DataPipelineResourceInstanceProfile"
                                }
                            },
                            {
                                "Key": "pipelineLogUri",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3://",
                                            {
                                                "Ref": "LoggingS3Bucket"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            }
                        ]
                    },
                    {
                        "Id": "DefaultSchedule",
                        "Name": "RunOnce",
                        "Fields": [
                            {
                                "Key": "occurrences",
                                "StringValue": "1"
                            },
                            {
                                "Key": "startAt",
                                "StringValue": "FIRST_ACTIVATION_DATE_TIME"
                            },
                            {
                                "Key": "type",
                                "StringValue": "Schedule"
                            },
                            {
                                "Key": "period",
                                "StringValue": "1 Day"
                            }
                        ]
                    },
                    {
                        "Id": "EmrCluster",
                        "Name": "EmrCluster",
                        "Fields": [
                            {
                                "Key": "terminateAfter",
                                "StringValue": "50 Minutes"
                            },
                            {
                                "Key": "masterInstanceType",
                                "StringValue": {
                                    "Ref": "EMRMasterInstanceTypeParameter"
                                }
                            },
                            {
                                "Key": "coreInstanceType",
                                "StringValue": {
                                    "Ref": "EMRCoreInstanceTypeParameter"
                                }
                            },
                            {
                                "Key": "coreInstanceCount",
                                "StringValue": {
                                    "Ref": "EMRCoreInstanceCountParameter"
                                }
                            },
                            {
                                "Key": "taskInstanceType",
                                "StringValue": {
                                    "Ref": "EMRTaskInstanceTypeParameter"
                                }
                            },
                            {
                                "Key": "taskInstanceCount",
                                "StringValue": {
                                    "Ref": "EMRTaskInstanceCountParameter"
                                }
                            },
                            {
                                "Key": "type",
                                "StringValue": "EmrCluster"
                            },
                            {
                                "Key": "subnetId",
                                "StringValue": {
                                    "Ref": "PublicSubnetParameter"
                                }
                            },
                            {
                                "Key": "keyPair",
                                "StringValue": {
                                    "Ref": "KeypairParameter"
                                }
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "releaseLabel",
                                "StringValue": {
                                    "Ref": "EMRReleaseLabelParameter"
                                }
                            }
                        ]
                    },
                    {
                        "Id": "InputOutputDataFormat",
                        "Name": "InputOutputDataFormat",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "TSV"
                            }
                        ]
                    },
                    {
                        "Id": "HiveInputDataNode",
                        "Name": "HiveInputDataNode",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "S3DataNode"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "dataFormat",
                                "RefValue": "InputOutputDataFormat"
                            },
                            {
                                "Key": "directoryPath",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3://",
                                            {
                                                "Ref": "IncomingS3Bucket"
                                            },
                                            "/incoming-file-placeholder"
                                        ]
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "Id": "HiveOutputDataNode",
                        "Name": "HiveOutputDataNode",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "S3DataNode"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "dataFormat",
                                "RefValue": "InputOutputDataFormat"
                            },
                            {
                                "Key": "directoryPath",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3://",
                                            {
                                                "Ref": "IntermediateS3Bucket"
                                            },
                                            "/intermediate-folder-placeholder"
                                        ]
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "Id": "RunHiveScript",
                        "Name": "RunHiveScript",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "HiveActivity"
                            },
                            {
                                "Key": "runsOn",
                                "RefValue": "EmrCluster"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "stage",
                                "StringValue": "false"
                            },
                            {
                                "Key": "scriptUri",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "s3://",
                                            {
                                                "Ref": "CodeS3BucketParameter"
                                            },
                                            "/",
                                            {
                                                "Ref": "HiveScriptsLocationParameter"
                                            },
                                            "/table-to-process.q"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "input",
                                "RefValue": "HiveInputDataNode"
                            },
                            {
                                "Key": "output",
                                "RefValue": "HiveOutputDataNode"
                            },
                            {
                                "Key": "scriptVariable",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "my_input=s3://",
                                            {
                                                "Ref": "IncomingS3Bucket"
                                            },
                                            "/incoming-file-placeholder"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "scriptVariable",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "my_output=s3://",
                                            {
                                                "Ref": "IntermediateS3Bucket"
                                            },
                                            "/intermediate-folder-placeholder"
                                        ]
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "Id": "SendSuccessSNSMessage",
                        "Name": "SendSuccessSNSMessage",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "SnsAlarm"
                            },
                            {
                                "Key": "role",
                                "StringValue": {
                                    "Ref": "DataPipelineRole"
                                }
                            },
                            {
                                "Key": "subject",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "-",
                                            {
                                                "Ref": "EnvironmentParameter"
                                            },
                                            " Data Pipeline successfully completed"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "message",
                                "StringValue": "Congrats, you rock!"
                            },
                            {
                                "Key": "topicArn",
                                "StringValue": {
                                    "Ref": "SuccessSNS"
                                }
                            }
                        ]
                    },
                    {
                        "Id": "MoveDatasetToArchives",
                        "Name": "MoveDatasetToArchives",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "ShellCommandActivity"
                            },
                            {
                                "Key": "command",
                                "StringValue": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "aws s3 mv s3://",
                                            {
                                                "Ref": "IncomingS3Bucket"
                                            },
                                            "/incoming-file-placeholder s3://",
                                            {
                                                "Ref": "ArchivalS3Bucket"
                                            },
                                            "/archival-file-placeholder --recursive"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "runsOn",
                                "RefValue": "EmrCluster"
                            },
                            {
                                "Key": "onSuccess",
                                "RefValue": "SendSuccessSNSMessage"
                            },
                            {
                                "Key": "dependsOn",
                                "RefValue": "LoadRedshift"
                            }
                        ]
                    },
                    {
                        "Id": "DeletePipeline",
                        "Name": "DeletePipeline",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "ShellCommandActivity"
                            },
                            {
                                "Key": "command",
                                "StringValue": "dpid=$(aws ec2 describe-tags --filters \"Name=resource-id,Values=$(curl http://169.254.169.254/latest/meta-data/instance-id)\" \"Name=key,Values=datapipeline-id\" --query 'Tags[*].[Value]' --output text --region us-east-1); aws datapipeline delete-pipeline --pipeline-id $dpid --region us-east-1"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "runsOn",
                                "RefValue": "EmrCluster"
                            },
                            {
                                "Key": "onSuccess",
                                "RefValue": "SendSuccessSNSMessage"
                            },
                            {
                                "Key": "dependsOn",
                                "RefValue": "MoveDatasetToArchives"
                            }
                        ]
                    },
                    {
                        "Id": "RedshiftDatabase",
                        "Name": "RedshiftDatabase",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "RedshiftDatabase"
                            },
                            {
                                "Key": "clusterId",
                                "StringValue": {
                                    "Ref": "RedshiftCluster"
                                }
                            },
                            {
                                "Key": "username",
                                "StringValue": {
                                    "Ref": "RedshiftMasterUserNameParameter"
                                }
                            },
                            {
                                "Key": "*password",
                                "StringValue": {
                                    "Ref": "RedshiftMasterUserPasswordParameter"
                                }
                            },
                            {
                                "Key": "databaseName",
                                "StringValue": {
                                    "Ref": "RedshiftMasterUserNameParameter"
                                }
                            }
                        ]
                    },
                    {
                        "Id": "DestRedshiftTable",
                        "Name": "DestRedshiftTable",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "RedshiftDataNode"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "database",
                                "RefValue": "RedshiftDatabase"
                            },
                            {
                                "Key": "createTableSql",
                                "StringValue": "CREATE TABLE IF NOT EXISTS #{tableName} (\n    id VARCHAR(50),\n    timestamp TIMESTAMP,\n    timestamp_year VARCHAR(256),\n    timestamp_month VARCHAR(256),\n    timestamp_day VARCHAR(256),\n    user_id BIGINT,\n    course_id BIGINT,\n    root_account_id BIGINT,\n    course_account_id BIGINT,\n    quiz_id BIGINT,\n    discussion_id BIGINT,\n    conversation_id BIGINT,\n    assignment_id BIGINT,\n    url VARCHAR(2048),\n    user_agent VARCHAR(1024),\n    http_method VARCHAR(256),\n    remote_ip VARCHAR(256),\n    interaction_micros BIGINT,\n    web_application_controller VARCHAR(256),\n    web_applicaiton_action VARCHAR(256),\n    web_application_context_type VARCHAR(256),\n    web_application_context_id VARCHAR(256),\n    browser VARCHAR(256),\n    os VARCHAR(256),\n    PRIMARY KEY (id)\n);"
                            },
                            {
                                "Key": "tableName",
                                "StringValue": "requests"
                            }
                        ]
                    },
                    {
                        "Id": "LoadRedshift",
                        "Name": "LoadRedshift",
                        "Fields": [
                            {
                                "Key": "type",
                                "StringValue": "RedshiftCopyActivity"
                            },
                            {
                                "Key": "input",
                                "RefValue": "HiveOutputDataNode"
                            },
                            {
                                "Key": "output",
                                "RefValue": "DestRedshiftTable"
                            },
                            {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            },
                            {
                                "Key": "runsOn",
                                "RefValue": "EmrCluster"
                            },
                            {
                                "Key": "insertMode",
                                "StringValue": "OVERWRITE_EXISTING"
                            },
                            {
                                "Key": "dependsOn",
                                "RefValue": "RunHiveScript"
                            }
                        ]
                    }
                ]
            }
        },
        "DumpStatusDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "KeyType": "HASH",
                        "AttributeName": "id"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentParameter"
                            },
                            "-dump-status"
                        ]
                    ]
                }
            }
        }
    },
    "Outputs": {
        "IncomingS3Bucket": {
            "Description": "Incoming S3 Bucket",
            "Value": {
                "Ref": "IncomingS3Bucket"
            }
        },
        "ArchivalS3Bucket": {
            "Description": "Archival S3 Bucket",
            "Value": {
                "Ref": "ArchivalS3Bucket"
            }
        },
        "DataPipelineLambdaRole": {
            "Description": "DataPipelineLambda IAM Role",
            "Value": {
                "Ref": "DataPipelineLambdaRole"
            }
        },
        "DataPipelineId": {
            "Description": "Data Pipeline Id",
            "Value": {
                "Ref": "Pipeline"
            }
        },
        "DownloadVerifyASGName": {
            "Description": "DownloadVerifyASG Name",
            "Value": {
                "Ref": "DownloadVerifyASG"
            }
        },
        "DownloadVerifyLambdaFunction": {
            "Description": "DownloadVerifyLambda Function",
            "Value": {
                "Ref": "DownloadVerifyLambda"
            }
        },
        "DataPipelineLambdaFunction": {
            "Description": "DataPipelineLambda Function",
            "Value": {
                "Ref": "DataPipelineLambda"
            }
        },
        "DatabaseInstance": {
            "Description": "Redshift Database",
            "Value": {
                "Ref": "RedshiftCluster"
            }
        },
        "DumpStatusDynamoTable": {
            "Description": "DumpStatus DynamoDB Table",
            "Value": {
                "Ref": "DumpStatusDynamoDBTable"
            }
        }
    }
}